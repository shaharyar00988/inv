<%- include('../partials/header') %>

<div class="container-fluid">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>New Purchase</h2>
    <a href="/purchases" class="btn btn-outline-secondary">
      <i class="bi bi-arrow-left"></i> Back to Purchases
    </a>
  </div>
  
  <% if (typeof error !== 'undefined' && error) { %>
    <div class="alert alert-danger" role="alert">
      <%= error %>
    </div>
  <% } %>
  
  <div class="row">
    <!-- Left Column - Purchase Form -->
    <div class="col-md-8">
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="mb-0">Purchase Details</h5>
        </div>
        <div class="card-body">
          <form id="purchaseForm" action="/purchases/create" method="POST">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="date" class="form-label">Date</label>
                <input type="date" class="form-control" id="date" name="date" value="<%= new Date().toISOString().split('T')[0] %>" required>
              </div>
              <div class="col-md-6">
                <label for="supplier" class="form-label">Supplier</label>
                <select class="form-select" id="supplier" name="supplierId" required>
                  <option value="">Select Supplier</option>
                  <% if (suppliers && suppliers.length > 0) { %>
                    <% suppliers.forEach(supplier => { %>
                      <option value="<%= supplier.id %>"><%= supplier.name %></option>
                    <% }) %>
                  <% } %>
                </select>
              </div>
            </div>
            
            <div class="mb-3">
              <label for="notes" class="form-label">Notes (Optional)</label>
              <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
            </div>
            
            <!-- Hidden fields for form submission -->
            <input type="hidden" id="itemsJson" name="items" value="[]">
            <input type="hidden" id="totalAmount" name="totalAmount" value="0">
            <input type="hidden" id="amountPaid" name="amountPaid" value="0">
            
            <div class="d-flex justify-content-between mt-4">
              <button type="button" class="btn btn-secondary" id="cancelBtn">Cancel</button>
              <button type="submit" class="btn btn-primary" id="saveBtn" disabled>Save Purchase</button>
            </div>
          </form>
        </div>
      </div>
      
      <!-- Added Items Table -->
      <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Purchase Items</h5>
          <span class="badge bg-primary" id="itemCount">0 items</span>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover" id="purchaseItemsTable">
              <thead>
                <tr>
                  <th>Item</th>
                  <th>Quantity</th>
                  <th>Purchase Price</th>
                  <th>Retail Price</th>
                  <th>Total</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="purchaseItemsBody">
                <tr id="emptyRow">
                  <td colspan="6" class="text-center">No items added yet</td>
                </tr>
              </tbody>
              <tfoot>
                <tr class="table-light">
                  <td colspan="4" class="text-end fw-bold">Total:</td>
                  <td class="fw-bold" id="totalDisplay">Rs. 0.00</td>
                  <td></td>
                </tr>
                <tr>
                  <td colspan="4" class="text-end">Amount Paid:</td>
                  <td>
                    <div class="input-group input-group-sm">
                      <span class="input-group-text">Rs.</span>
                      <input type="number" class="form-control" id="amountPaidInput" min="0" step="0.01" value="0">
                    </div>
                  </td>
                  <td></td>
                </tr>
                <tr class="table-light">
                  <td colspan="4" class="text-end fw-bold">Remaining:</td>
                  <td class="fw-bold" id="remainingDisplay">Rs. 0.00</td>
                  <td></td>
                </tr>
              </tfoot>
            </table>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Right Column - Item Search -->
    <div class="col-md-4">
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="mb-0">Search Items</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <div class="input-group">
              <input type="text" class="form-control" id="itemSearchInput" placeholder="Search items...">
              <button class="btn btn-outline-secondary" type="button" id="searchBtn">
                <i class="bi bi-search"></i>
              </button>
            </div>
          </div>
          
          <div id="searchResults" class="list-group mb-3">
            <!-- Search results will appear here -->
            <div class="text-center text-muted py-3">
              <i class="bi bi-search"></i>
              <p class="mb-0">Search for items to add</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Item Modal -->
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="addItemModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addItemModalLabel">Add Item</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addItemForm">
          <input type="hidden" id="itemId">
          <input type="hidden" id="itemName">
          <input type="hidden" id="itemType">
          
          <div class="mb-3">
            <label for="itemDisplayName" class="form-label">Item</label>
            <input type="text" class="form-control" id="itemDisplayName" readonly>
          </div>
          
          <div class="mb-3">
            <label for="itemQuantity" class="form-label">Quantity</label>
            <input type="number" class="form-control" id="itemQuantity" min="1" value="1" required>
          </div>
          
          <div class="mb-3">
            <label for="itemPurchasePrice" class="form-label">Purchase Price</label>
            <div class="input-group">
              <span class="input-group-text">Rs.</span>
              <input type="number" class="form-control" id="itemPurchasePrice" min="0" step="0.01" required>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="itemRetailPrice" class="form-label">Retail Price</label>
            <div class="input-group">
              <span class="input-group-text">Rs.</span>
              <input type="number" class="form-control" id="itemRetailPrice" min="0" step="0.01" required>
            </div>
            <small class="text-muted">This will update the retail price in inventory</small>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirmAddItem">Add</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const itemSearchInput = document.getElementById('itemSearchInput');
    const searchBtn = document.getElementById('searchBtn');
    const searchResults = document.getElementById('searchResults');
    const purchaseItemsBody = document.getElementById('purchaseItemsBody');
    const emptyRow = document.getElementById('emptyRow');
    const itemCount = document.getElementById('itemCount');
    const totalDisplay = document.getElementById('totalDisplay');
    const amountPaidInput = document.getElementById('amountPaidInput');
    const remainingDisplay = document.getElementById('remainingDisplay');
    const saveBtn = document.getElementById('saveBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const itemsJson = document.getElementById('itemsJson');
    const totalAmount = document.getElementById('totalAmount');
    const amountPaid = document.getElementById('amountPaid');
    
    // Quick Add Item Form
    const quickAddItemForm = document.getElementById('quickAddItemForm');
    const quickItemName = document.getElementById('quickItemName');
    const quickItemType = document.getElementById('quickItemType');
    const quickPurchasePrice = document.getElementById('quickPurchasePrice');
    const quickRetailPrice = document.getElementById('quickRetailPrice');
    const quickQuantity = document.getElementById('quickQuantity');
    
    // Add Item Modal
    const addItemModal = new bootstrap.Modal(document.getElementById('addItemModal'));
    const itemId = document.getElementById('itemId');
    const itemName = document.getElementById('itemName');
    const itemType = document.getElementById('itemType');
    const itemDisplayName = document.getElementById('itemDisplayName');
    const itemQuantity = document.getElementById('itemQuantity');
    const itemPurchasePrice = document.getElementById('itemPurchasePrice');
    const itemRetailPrice = document.getElementById('itemRetailPrice');
    const confirmAddItem = document.getElementById('confirmAddItem');
    
    // Purchase items array
    let purchaseItems = [];
    
    // Search for items
    async function searchItems() {
      const query = itemSearchInput.value.trim();
      
      if (query.length < 2) {
        searchResults.innerHTML = `
          <div class="text-center text-muted py-3">
            <i class="bi bi-search"></i>
            <p class="mb-0">Enter at least 2 characters to search</p>
          </div>
        `;
        return;
      }
      
      try {
        searchResults.innerHTML = `
          <div class="text-center py-3">
            <div class="spinner-border spinner-border-sm text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mb-0 mt-2">Searching...</p>
          </div>
        `;
        
        const response = await fetch(`/api/inventory/search?query=${encodeURIComponent(query)}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        const items = Array.isArray(data) ? data : [];
        
        if (items.length === 0) {
          searchResults.innerHTML = `
            <div class="text-center text-muted py-3">
              <i class="bi bi-exclamation-circle"></i>
              <p class="mb-0">No items found</p>
            </div>
          `;
          return;
        }
        
        searchResults.innerHTML = '';
        
        items.forEach(item => {
          const listItem = document.createElement('button');
          listItem.className = 'list-group-item list-group-item-action';
          listItem.type = 'button';
          
          listItem.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <h6 class="mb-0">${item.name}</h6>
                ${item.urduName ? `<small class="text-muted">${item.urduName}</small>` : ''}
                <small class="d-block">
                  <span class="badge ${item.type === 'service' ? 'bg-info' : 'bg-secondary'}">${item.type}</span>
                  <span class="ms-2">Stock: ${item.stock}</span>
                </small>
              </div>
              <div class="text-end">
                <div>Rs. ${item.purchasePrice.toFixed(2)}</div>
                <small class="text-muted">Rs. ${item.retailPrice.toFixed(2)} retail</small>
              </div>
            </div>
          `;
          
          listItem.addEventListener('click', () => {
            // Show add item modal
            itemId.value = item.id;
            itemName.value = item.name;
            itemType.value = item.type;
            itemDisplayName.value = item.name;
            itemPurchasePrice.value = item.purchasePrice.toFixed(2);
            itemRetailPrice.value = item.retailPrice.toFixed(2);
            itemQuantity.value = 1;
            
            addItemModal.show();
          });
          
          searchResults.appendChild(listItem);
        });
        
      } catch (error) {
        console.error('Error searching items:', error);
        searchResults.innerHTML = `
          <div class="text-center text-danger py-3">
            <i class="bi bi-exclamation-triangle"></i>
            <p class="mb-0">Error searching items. Please try again.</p>
          </div>
        `;
      }
    }
    
    // Add item to purchase
    function addItemToPurchase(item) {
      // Check if item already exists in the purchase
      const existingItemIndex = purchaseItems.findIndex(i => i.id === item.id);
      
      if (existingItemIndex !== -1) {
        // Update existing item
        purchaseItems[existingItemIndex].quantity += item.quantity;
        purchaseItems[existingItemIndex].price = item.price;
        purchaseItems[existingItemIndex].retailPrice = item.retailPrice;
      } else {
        // Add new item
        purchaseItems.push(item);
      }
      
      // Update UI
      updatePurchaseItemsTable();
      updateTotals();
      
      // Enable save button if there are items
      saveBtn.disabled = purchaseItems.length === 0;
    }
    
    // Update purchase items table
    function updatePurchaseItemsTable() {
      // Update item count
      itemCount.textContent = `${purchaseItems.length} items`;
      
      // Clear table
      purchaseItemsBody.innerHTML = '';
      
      if (purchaseItems.length === 0) {
        purchaseItemsBody.appendChild(emptyRow);
        return;
      }
      
      // Add items to table
      purchaseItems.forEach((item, index) => {
        const row = document.createElement('tr');
        
        row.innerHTML = `
          <td>
            ${item.name}
            <small class="d-block text-muted">${item.type}</small>
          </td>
          <td>${item.quantity}</td>
          <td>Rs. ${parseFloat(item.price).toFixed(2)}</td>
          <td>Rs. ${parseFloat(item.retailPrice).toFixed(2)}</td>
          <td>Rs. ${(item.quantity * item.price).toFixed(2)}</td>
          <td>
            <button class="btn btn-sm btn-outline-danger remove-item" data-index="${index}">
              <i class="bi bi-trash"></i>
            </button>
          </td>
        `;
        
        purchaseItemsBody.appendChild(row);
      });
      
      // Add event listeners to remove buttons
      document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          purchaseItems.splice(index, 1);
          updatePurchaseItemsTable();
          updateTotals();
          
          // Disable save button if there are no items
          saveBtn.disabled = purchaseItems.length === 0;
        });
      });
    }
    
    // Update totals
    function updateTotals() {
      const total = purchaseItems.reduce((sum, item) => sum + (item.quantity * item.price), 0);
      const paid = parseFloat(amountPaidInput.value) || 0;
      const remaining = total - paid;
      
      totalDisplay.textContent = `Rs. ${total.toFixed(2)}`;
      remainingDisplay.textContent = `Rs. ${remaining.toFixed(2)}`;
      remainingDisplay.classList.toggle('text-danger', remaining > 0);
      
      // Update hidden fields
      totalAmount.value = total.toFixed(2);
      amountPaid.value = paid.toFixed(2);
      itemsJson.value = JSON.stringify(purchaseItems);
    }
    
    // Event Listeners
    searchBtn.addEventListener('click', searchItems);
    
    itemSearchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchItems();
      }
    });
    
    confirmAddItem.addEventListener('click', function() {
      const item = {
        id: itemId.value,
        name: itemName.value,
        type: itemType.value,
        quantity: parseInt(itemQuantity.value),
        price: parseFloat(itemPurchasePrice.value),
        retailPrice: parseFloat(itemRetailPrice.value)
      };
      
      addItemToPurchase(item);
      addItemModal.hide();
    });
    
    amountPaidInput.addEventListener('input', updateTotals);
    
    cancelBtn.addEventListener('click', function() {
      window.location.href = '/purchases';
    });
    
    // Quick Add Item Form
    quickAddItemForm.addEventListener('submit', function(event) {
      event.preventDefault();
      
      const item = {
        id: 'new-' + Date.now(), // Temporary ID for new items
        name: quickItemName.value,
        type: quickItemType.value,
        quantity: parseInt(quickQuantity.value),
        price: parseFloat(quickPurchasePrice.value),
        retailPrice: parseFloat(quickRetailPrice.value),
        isNew: true
      };
      
      addItemToPurchase(item);
      
      // Reset form
      quickItemName.value = '';
      quickPurchasePrice.value = '';
      quickRetailPrice.value = '';
      quickQuantity.value = 1;
      quickItemName.focus();
    });
    
    // Calculate retail price based on purchase price
    quickPurchasePrice.addEventListener('input', function() {
      const purchasePrice = parseFloat(this.value) || 0;
      // Add 30% markup by default
      const suggestedRetailPrice = purchasePrice * 1.3;
      quickRetailPrice.value = suggestedRetailPrice.toFixed(2);
    });
    
    // Calculate retail price in add item modal
    itemPurchasePrice.addEventListener('input', function() {
      const purchasePrice = parseFloat(this.value) || 0;
      // Add 30% markup by default
      const suggestedRetailPrice = purchasePrice * 1.3;
      itemRetailPrice.value = suggestedRetailPrice.toFixed(2);
    });
  });
</script>

<%- include('../partials/footer') %> 